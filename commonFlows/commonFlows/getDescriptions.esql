BROKER SCHEMA commonFlows
DECLARE HOST EXTERNAL CHARACTER ' ';
DECLARE AUTHORIZATION EXTERNAL CHARACTER ' ';

CREATE COMPUTE MODULE getDescriptions_Req 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	SET Environment.Variables.Data = InputRoot.JSON.Data;
				
	/*MARITAL STATUS*/				
	CREATE FIELD Environment.Variables.Description type (JSON.Array);
	DECLARE outDesRef REFERENCE TO Environment.Variables.Description;
	DECLARE envref REFERENCE TO Environment.Variables.Data;
	DECLARE maritalIndex INTEGER 1;
		FOR inPayload AS InputRoot.JSON.Data.Item[] DO			
			SET outDesRef.Item[maritalIndex].referenceNumber = inPayload.referenceNumber;
			DECLARE persCount INTEGER 1;
			FOR inLoad AS InputRoot.JSON.Data.Item[maritalIndex].personList.Item[] DO
				DECLARE persCount INTEGER 1;
				SET outDesRef.Item[maritalIndex].maritalStatusDescription = inLoad.maritalStatusDescription;
				SET persCount = persCount + 1;
			END FOR;
		 	SET maritalIndex = maritalIndex + 1;
		END FOR;
	 	SET Environment.Variables.gcKeyName = 'MS';  
	 PROPAGATE TO TERMINAL 'out' ;
	 
	/*GENDER*/	 
	DECLARE genderIndex INTEGER 1;
	FOR inPayload AS InputRoot.JSON.Data.Item[] DO			
		SET outDesRef.Item[genderIndex].referenceNumber = inPayload.referenceNumber;
		DECLARE persCount INTEGER 1;
		FOR inLoad AS InputRoot.JSON.Data.Item[genderIndex].personList.Item[] DO
			DECLARE persCount INTEGER 1;
			SET outDesRef.Item[genderIndex].gender = inLoad.gender;
			SET persCount = persCount + 1;
		END FOR;
	 	SET genderIndex = genderIndex + 1;
	END FOR;
 	SET Environment.Variables.gcKeyName = 'SX'; 
	PROPAGATE TO TERMINAL 'out';
	
	/*RelationshipGroup*/		
	DECLARE relationIndex INTEGER 1;
	FOR inPayload AS InputRoot.JSON.Data.Item[] DO			
		SET outDesRef.Item[relationIndex].referenceNumber = inPayload.referenceNumber;
		DECLARE persCount INTEGER 1;
		FOR inLoad AS InputRoot.JSON.Data.Item[relationIndex].personList.Item[] DO
			DECLARE persCount INTEGER 1;
			SET outDesRef.Item[relationIndex].relationshipDescription = inLoad.additionalInformation.relationshipDescription;
			SET persCount = persCount + 1;
		END FOR;
	 	SET relationIndex = relationIndex + 1;
	END FOR;
 	SET Environment.Variables.gcKeyName = 'RG'; 
	PROPAGATE TO TERMINAL 'out';
	RETURN FALSE;
	END;
END MODULE;

CREATE COMPUTE MODULE getDescriptions_saveToGc
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DELETE FIELD Environment.Variables.GCSTATUS;
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
		--Throw back exception if Mongo doesn't have the config
		IF inputRef._returned = 0 THEN
			THROW USER EXCEPTION SEVERITY 3 VALUES('Global Cache','No config found in DB');
			RETURN FALSE;
		END IF;
		IF inputRef._returned = 1 THEN
			CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object);
			DECLARE outputRef REFERENCE TO OutputRoot.JSON.Data;
			SET outputRef = InputRoot.JSON.Data._embedded.Item[1];
			CREATE FIRSTCHILD of outputRef NAME 'requestType';
			SET outputRef.requestType = Environment.Variables.gcKeyName;
			DELETE FIELD outputRef._id;
		ELSE 
			IF inputRef._returned > 1 THEN
				CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Array);
				SET OutputRoot.JSON.Data.*[] = InputRoot.JSON.Data._embedded.*[];
				SET Environment.gcData.{Environment.Variables.gcKeyName} = OutputRoot.JSON.Data;
			END IF;
		END IF;		
		PROPAGATE TO TERMINAL 'out';
		RETURN FALSE;
	END;
END MODULE;

CREATE COMPUTE MODULE getDescriptions_BuildDbReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
		IF Environment.Variables.GCSTATUS = 'EMPTY' THEN
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
--			IF Environment.Variables.gcKeyName <> 'SUBURB' THEN
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = HOST ||'/cache/static_common?filter={''requestType'': '''|| 'TGENB'|| Environment.Variables.gcKeyName ||'''}'||'&pagesize=1000';			
--			ELSE
--				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = HOST ||'/cache/addressSuburbs?filter={''sequenceNumber'': '''|| Environment.Variables.inGcKey ||'''}';
--			END IF;
			SET OutputRoot.HTTPRequestHeader."Authorization" = AUTHORIZATION;
			SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';			
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			SET Environment.gcData.{Environment.Variables.gcKeyName} = InputRoot.JSON.Data;
			PROPAGATE TO TERMINAL 'out';
		END IF;		
		RETURN FALSE;
	END;
END MODULE;